@page "/rooms/{RoomId}"
@page "/rooms/{RoomId}/{ParticipantName}"
@using Queueomatic.Shared.DTOs
@inject NavigationManager Navigation
@using Blazored.SessionStorage;
@inject ISessionStorageService SessionStorageService;
@inject AuthenticationStateProvider AuthProvider;
@inject HttpClient HttpClient;

<style>
    .dropzone {
        min-height: 20rem;
        min-width: 20rem;
    }
</style>

<PageTitle>@RoomName!</PageTitle>

<LogoComponent />

<div class="container d-flex align-items-center justify-content-center  col-sm-5 col-12 mt-4">
    <button class="exit-button d-flex justify-content-center m-1" @onclick="Exit">
        Exit
        <div class="arrow-wrapper">
            <div class="arrow"></div>
        </div>
    </button>
</div>

<h1 class="text-center roomText mt-5">Welcome to @RoomName!</h1>
@if (IsOwner)
{
    <h5 class="text-center roomId mt-1">Room Id: @RoomId</h5>
}

<div class="container">
    <div class="row py-4">
        <div class="col-12 d-flex flex-column align-items-center justify-content-center mb-5">
            <p class="header">Currently helping</p>
            <div class="d-flex flex-column ">
                <Dropzone Items="_activeParticipants" Context="c" TItem="ParticipantRoomDto" Accepts="(current, hoveredItem) => hoveredItem == null" AllowsDrag="s => CanMoveAsync(s)" OnItemDrop="@(async participant => await UpdateUser(participant, StatusDto.Ongoing))" Class="plk-dd-dropzone  dropzone h-100 w-100">
                    <ChildContent>
                        <div class="card box">
                            <div class="card-body">
                                <div class="d-flex justify-content-center ">
                                    <div class="nameBox">
                                        <h5 class="text-center">@c.NickName</h5>
                                    </div>
                                    <AuthorizeView  Policy="IsOwnerOrAdministrator" Resource="@_roomDto">
                                        <div class="outer">
                                            <div class="inner">
                                                <label @onclick="@(async () => await KickUser(@c.ConnectionId, @c.Id))">Kick</label>
                                            </div>
                                        </div>
                                    </AuthorizeView>
                                </div>
                            </div>
                        </div>
                    </ChildContent>
                </Dropzone>
            </div>
        </div>
        <div class="container d-flex justify-content-center align-items-center">
            <div class="row d-flex reverse-column justify-content-center ">

                <div class="col d-flex flex-column align-items-center justify-content-center mb-5">
                    <p class="header">Idling</p>
                    <Dropzone Items="_idlingParticipants" Context="c" TItem="ParticipantRoomDto" Accepts="(current, hoveredItem) => hoveredItem == null" AllowsDrag="s => CanMoveAsync(s)" OnItemDrop="@(async participant => await UpdateUser(participant, StatusDto.Idling))" Class="plk-dd-dropzone dropzone h-100 w-100">
                        <ChildContent>
                            <div class="card" style="border-left: 3px solid lime">
                                <div class="card-body">
                                    <div class="d-flex justify-content-center ">
                                        <div class="nameBox">
                                            <h5 class="text-center">@c.NickName</h5>
                                        </div>
                                        <AuthorizeView  Policy="IsOwnerOrAdministrator" Resource="@_roomDto">
                                            <div class="outer">
                                                <div class="inner">
                                                    <label @onclick="@(async () => await KickUser(@c.ConnectionId, @c.Id))">Kick</label>
                                                </div>
                                            </div>
                                        </AuthorizeView>
                                    </div>
                                </div>
                            </div>
                        </ChildContent>
                    </Dropzone>
                </div>
                <div class="col d-flex flex-column align-items-center justify-content-center">
                    <p class="header">Waiting for help</p>
                    <Dropzone Items="_waitingParticipants" Context="c" TItem="ParticipantRoomDto" Accepts="(current, hoveredItem) => hoveredItem == null" AllowsDrag="s => CanMoveAsync(s)" OnItemDrop="@(async participant => await UpdateUser(participant, StatusDto.Waiting))" Class="plk-dd-dropzone dropzone h-100 w-100 ">
                        <ChildContent>
                            <div class="card" style="border-left: 3px solid orange">
                                <div class="card-body">
                                    <div class="d-flex justify-content-center ">
                                        <div class="nameBox">
                                            <h5 class="text-center">@c.NickName</h5>
                                        </div>
                                        <AuthorizeView  Policy="IsOwnerOrAdministrator" Resource="@_roomDto">
                                            <div class="outer">
                                                <div class="inner">
                                                    <label @onclick="@(async () => await KickUser(@c.ConnectionId, @c.Id))">Kick</label>
                                                </div>
                                            </div>
                                        </AuthorizeView>
                                    </div>
                                </div>
                            </div>
                        </ChildContent>
                    </Dropzone>
                </div>
            </div>
        </div>
    </div>
</div>