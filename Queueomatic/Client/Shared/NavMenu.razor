@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<div class="container ">
    <a href="/" class="col-sm-7 col-12">
        <img src="/static/logo.png" alt="logo" class="img-fluid " />
    </a>

    <AuthorizeView>
        <Authorized>
            <div class="container d-flex align-items-center  col-sm-5 col-12 mt-4">
                <button class="btn btn-primary">Hello, @_userName</button>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="container d-flex align-items-center  col-sm-5 col-12 mt-4">
                <div class="button-login button-login-1 me-4  container d-flex align-items-center justify-content-center" @onclick="NavigateToLogin"><span class="btn-login-txt">Login</span></div>
                <button class="signup-button d-flex justify-content-center" @onclick="NavigateToSignup">
                    Sign up
                    <div class="arrow-wrapper">
                        <div class="arrow"></div>
                    </div>
                </button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>


@code {

    private string _userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var name = state.User.Claims.FirstOrDefault();
        if (name != null)
            _userName = name.Value;

    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToSignup()
    {
        NavigationManager.NavigateTo("/login");
    }

}
